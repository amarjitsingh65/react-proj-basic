{"version":3,"sources":["logo.svg","TableHeader.js","Tbody.js","Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TableHeader","Tbody","props","rows","thData","map","row","index","key","fName","lName","onClick","removeItem2","Table","this","tabData","removeItem","Component","Form","intitialState","state","update","event","target","name","value","setState","submitForm","htmlFor","type","id","onChange","App","myData","filter","item","i","formSubmit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,qICC7BC,G,YAAc,WAGpB,OACI,+BACI,4BACI,0CACA,yCACA,0CCRPC,EAAQ,SAACC,GAClB,IAAMC,EAAMD,EAAME,OAAOC,KAAI,SAACC,EAAIC,GAE9B,OACQ,wBAAIC,IAAOD,GACP,4BAAKD,EAAIG,OACT,4BAAKH,EAAII,OACT,4BAAI,4BAAQC,QAAW,kBAAKT,EAAMU,YAAYL,KAA1C,eAKpB,OAAO,+BAAQJ,ICiCJU,E,uKAXF,IAAD,EAC0BC,KAAKZ,MAA5Ba,EADH,EACGA,QAASC,EADZ,EACYA,WAChB,OACI,+BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOZ,OAAUW,EAASH,YAAeI,S,GATrCC,a,OC2BLC,E,4MAtDXC,cAAgB,CACZV,MAAM,GACNC,MAAM,I,EAIbU,MAAQ,EAAKD,c,EAEbE,OAAS,SAACC,GAAS,IAAD,EACSA,EAAMC,OAAtBC,EADO,EACPA,KAAMC,EADC,EACDA,MACb,EAAKC,SAAL,eACKF,EAAQC,K,EAKjBE,WAAa,WACT,EAAKzB,MAAMyB,WAAW,EAAKP,OAC3B,EAAKM,SAAS,EAAKP,gB,uDAGd,IAAD,EACmBL,KAAKM,MAArBX,EADH,EACGA,MAAOC,EADV,EACUA,MACd,OACI,8BACM,2BAAOkB,QAAQ,SAAf,cACA,2BACAC,KAAK,OACLL,KAAK,QACLM,GAAK,QACLL,MAAShB,EACRsB,SAAYjB,KAAKO,SAEjB,6BACA,6BACD,2BAAOO,QAAU,SAAjB,cACA,2BACAC,KAAM,OACNL,KAAK,QACLM,GAAK,QACLL,MAASf,EACTqB,SAAYjB,KAAKO,SAEhB,6BACA,6BAEJ,2BAAOQ,KAAK,SAAUJ,MAAQ,SAASd,QAAWG,KAAKa,kB,GAhDhDV,aCgEJe,E,4MA3DbZ,MAAQ,CAENa,OAAQ,CACN,CACExB,MAAO,YACPC,MAAO,QAET,CACED,MAAO,UACPC,MAAO,QAET,CACED,MAAO,UACPC,MAAO,W,EAKdM,WAAa,SAACT,GAAU,IAClB0B,EAAU,EAAKb,MAAfa,OACL,EAAKP,SAAS,CACZO,OAASA,EAAOC,QAAO,SAACC,EAAKC,GAC3B,OAAOA,GAAK7B,Q,EAKlB8B,WAAa,SAACF,GACZ,EAAKT,SAAS,CAAEO,OAAO,GAAD,mBAAO,EAAKb,MAAMa,QAAlB,CAA0BE,O,uDAGxC,IAgBHF,EAAUnB,KAAKM,MAAfa,OAEH,OACE,6BACE,kBAAC,EAAD,CAAOlB,QAAWkB,EAASjB,WAAcF,KAAKE,aAC9C,kBAAC,EAAD,CAAMW,WAAcb,KAAKuB,kB,GAtDfpB,aCOEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ceee2a5b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nexport const  TableHeader = () =>  {\n  \n\n        return (\n            <thead>\n                <tr>\n                    <th>First Name</th>\n                    <th>Last name</th>\n                    <th>Remove</th>\n                </tr>\n            </thead>\n                \n        )\n    }\n","import React from 'react';\nexport const Tbody = (props) =>{\n    const rows= props.thData.map((row,index) => {\n\n        return (\n                <tr key = {index}>\n                    <td>{row.fName}</td>\n                    <td>{row.lName}</td>\n                    <td><button onClick = {()=> props.removeItem2(index)}>Delete</button></td>\n                </tr>\n        )\n    })\n\n    return <tbody>{rows}</tbody>\n    /*\n        return (\n            <tbody>\n                <tr>\n                    <td>Amarjit</td>\n                    <td>Singh</td>\n                </tr>\n            </tbody>\n        )\n    */\n    \n}\n\n","import React, {Component} from 'react';\nimport {TableHeader} from './TableHeader';\nimport {Tbody} from './Tbody';\n/*\nconst Tbody = () =>{\n    return (\n        <tbody>\n            <tr>\n                <td>Amarjit</td>\n                <td>Singh</td>\n            </tr>\n        </tbody>\n    )\n    \n}\n\nconst  TableHeader = () =>  {\n  \n\n    return (\n        <thead>\n            <tr>\n                <th>First Name</th>\n                <th>Last name</th>\n            </tr>\n        </thead>\n            \n    )\n}\n*/\n\nclass Table extends Component{\n\n    \n\n    render(){\n        const {tabData, removeItem} = this.props;\n        return(\n            <table>\n                <TableHeader/>\n                <Tbody thData = {tabData} removeItem2 = {removeItem}/>\n            </table>\n        )\n    }\n\n}\nexport default Table;\n","import React, {Component} from 'react';\n\nclass Form extends Component{\n\n    intitialState = {\n        fName:'',\n        lName:''\n    }\n\n\n state = this.intitialState;\n\n update = (event)=>{\n     const {name, value } = event.target;\n     this.setState({\n         [name] : value\n\n     })\n }\n\n submitForm = () => {\n     this.props.submitForm(this.state);\n     this.setState(this.intitialState);\n }\n\n render(){\n     const {fName, lName} = this.state;\n     return (\n         <form>\n               <label htmlFor='fName'>First Name</label> \n               <input \n               type='text'\n               name='fName'\n               id = 'fName'\n               value = {fName}\n                onChange = {this.update}\n               />\n                <br/>\n                <br/>\n               <label htmlFor = 'lName'> Last Name</label>\n               <input\n               type= 'text'\n               name='lName'\n               id = 'lName'\n               value = {lName}\n               onChange = {this.update}\n               />\n                <br/>\n                <br/>\n            \n            <input type=\"button\"  value = \"Submit\" onClick = {this.submitForm}/>\n         </form>\n\n         \n     )\n }\n\n}\nexport default Form;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Table from './Table';\nimport Form from './Form';\nclass App extends Component {\n\n  state = {\n    \n    myData: [\n      {\n        fName: 'Jaspinder',\n        lName: 'Kaur'\n      },\n      {\n        fName: 'Gurleen',\n        lName: 'Kaur'\n      },\n      {\n        fName: 'Sukhman',\n        lName: 'Singh'\n      }\n    ]\n  }\n\n removeItem = (index) =>{\nconst {myData} = this.state;\n  this.setState({\n    myData:  myData.filter((item,i)=>{\n      return i != index;\n    })\n  })\n}\n\nformSubmit = (item) => {\n  this.setState({ myData: [... this.state.myData, item]})\n}\n\n  render(){\n    /*const myData = [\n      {\n        fName: 'Jaspinder',\n        lName: 'Kaur'\n      },\n      {\n        fName: 'Gurleen',\n        lName: 'Kaur'\n      },\n      {\n        fName: 'Sukhman',\n        lName: 'Singh'\n      }\n    ]*/\n\nconst {myData} = this.state;\n\n    return(\n      <div>\n        <Table tabData = {myData}  removeItem = {this.removeItem}/>\n        <Form submitForm = {this.formSubmit}/>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n/*\nfunction App() {\n\n  const myData = [\n    {\n      fName: 'Jaspinder',\n      lName: 'Kaur'\n    },\n    {\n      fName: 'Gurleen',\n      lName: 'Kaur'\n    },\n    {\n      fName: 'Sukhman',\n      lName: 'Singh'\n    }\n  ]\n\n\n  \n\n\n  return (\n    <Table tabData = {myData}/>\n  );\n}\n\nexport default App;\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import App from './API';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}